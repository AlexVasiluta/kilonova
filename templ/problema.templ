{{ template "util/header" . }}
<div class="container">
	<table class="table">
		<thead class="thead-dark">
			<tr>
				<th scope="col">ID</th>
				<th scope="col">Autor</th>
				<th scope="col">Citire/Afișare</th>
				<th scope="col">Limită memorie</th>
				<th scope="col">Limită timp</th>
				{{ if .ProblemEditor }}
				<th scope="col">Vizibilă</th>
				{{ end }}
			</tr>
		</thead>
		<tbody>
			<tr>
				<th scope="row">{{- .Problem.ID -}}</th>
				<th>{{.Problem.User.Name}}</th>
				<th>
				{{if .Problem.ConsoleInput}}
					{{- printf "Consolă" -}}
				{{else}}
					{{- .Problem.TestName -}}.in/{{- .Problem.TestName -}}.out
				{{end}}
				</th>
				<th>{{- KBtoMB .Problem.MemoryLimit -}}MB/{{- KBtoMB .Problem.StackLimit -}}MB</th>
				<th>{{- .Problem.TimeLimit -}}s</th>
				{{ if .ProblemEditor }}
				<th>{{.Problem.Visible}}</th>
				{{ end }}
			</tr>
		</tbody>
	</table>


	{{ if .ProblemEditor }}
		<a href="/probleme/{{- .Problem.ID -}}/edit">[editare]</a>	
	{{ end }}
	
	<h1>Problema <code>{{.Problem.Name}}</code></h1>
	<hr/>
	
	<div>

		<div id="problem-content"></div>

		<script>
			$("#problem-content").html(md.render("{{- .Problem.Text -}}"));
		</script>

		{{ if .LoggedIn }}

			<h1>Încărcare sursă</h1>
			<p>(Dacă mă întrebați de ce merge doar c++ acum: why not?)</p>

			<form id="taskSubmit" autocomplete="off">
				<textarea id="TaskArea" style="display: none;"></textarea>
				<button class="btn btn-primary mb-2" type="submit">Trimite</button>

			</form>

			<script>
				var defaultIn = `#include <iostream>
using namespace std;
int main()
{
	cout << "Hello, world!\\n";
	return 0;
}`;
				$("#TaskArea").html(defaultIn);
				var cm = CodeMirror.fromTextArea(document.getElementById("TaskArea"), {
					lineNumbers: true,
					indentUnit: 4,
					lineWrapping: true,
					mode: "text/x-c++src",
				});
				cm.setSize(null, "100%");
				$("#taskSubmit").submit(e => {
					e.preventDefault();
					let sendData = {
						problemID: "{{ .Problem.ID }}",
						lang: "cpp",
						code: cm.getValue(),
					};
					
					(async () => {
						let res = await postCall("/tasks/submit", sendData)
						if(res.status == "error") {
							createToast({
								status: "error",
								title: "Could not submit task",
								description: res.data
							})
							return
						}
						createToast({description: "Uploaded", onclick: () => window.location.assign(`/tasks/${res.data}`)})
					})()

					/*console.log()
					$.post("/api/tasks/submit", sendData, (a, b, c) => createToast({
						description: "Uploaded", onclick: function () {
							window.location.assign(`/tasks/${JSON.parse(a)["data"]}`)
						}
					})).fail((a, b, c) => console.error(a, b, c));*/
				})
			</script>
			<br />
			<br />
			<br />
			<br />

		{{ end }}

	</div>

</div>
{{ template "util/footer" . }}
