{{template "util/header" . }}
<div class="container">
    <a href="/probleme/{{- .Problem.ID -}}">[view]</a>
	<h1>Editare Problemă</h1>
	<h3>Editare titlu</h3>
    <form id="titleForm" autocomplete="off">
        <div class="form-group">
            <input class="form-control" type="text" id="title" name="title" value="{{.Problem.Name}}"
                placeholder="Titlu..." required />
        </div>
        <div class="form-group">
            <button class="btn btn-primary mb-2" type="submit">Editare</button>
        </div>
    </form>

	{{ if (and (not .Problem.ConsoleInput) false) }}
		<div id="editFilename">
			<h3>Editare nume teste (NOT IMPLEMENTED YET)</h3>
			<form id="filenameForm" autocomplete="off">
				<div class="form-group">
					<input class="form-control" type="text" id="testname" name="testName" value="{{.Problem.TestName}}" placeholder="Nume teste..." required>
				</div>
				<div class="form-group">
					<button class="btn btn-primary mb-2" type="submit">Editare</button>
				</div>
			</form>
		</div>
	{{end}}

	<script>
		let problemID = {{.Problem.ID}}
		let visible = {{.Problem.Visible}}

		async function toggleVisiblity() {
			visible = !visible
			let res = await postCall(`/problem/${problemID}/update/setVisible`, {visible})
			createToast({
				status: res.status,
				title: `Made ${(visible ? "visible" : "invisible")}`,
				description: res.data
			})
		}
	</script>

    <div class="list-group">
        <span class="list-group-item active">Alte edit-uri</span>
        <a class="list-group-item list-group-item-action" href="/probleme/{{.Problem.ID}}/edit/enunt">Editare enunț</a>
        <a class="list-group-item list-group-item-action" href="/probleme/{{.Problem.ID}}/edit/limite">Editare
            limite</a>
        <a class="list-group-item list-group-item-action" href="/probleme/{{.Problem.ID}}/edit/teste">Editare teste</a>
    	<button class="list-group-item list-group-item-action" onclick="toggleVisiblity()">Fă vizibilă/invizibilă</button>
	</div>
    <script>

        $("#titleForm").submit((e) => {
            e.preventDefault();
            let title = $("#titleForm #title").val();
            console.log(title);
			
			(async () => {
				let res = await postCall(`/problem/${problemID}/update/title`, {title})
				if(res.status == "error") {
					createToast({
						status: "error",
						title: "Could not update title",
						description: res.data
					})
					return
				}
				createToast({description: "Successfully updated title", onclick: () => window.location.assign(`/probleme/${problemID}`)})
			})()
        });
	</script>
</div>
{{template "util/footer" . }}
