{{template "util/header" . }}
<div class="c-container">
    <a href="/probleme/{{- .Problem.ID -}}">[view]</a>
	<h1>Editare Problemă</h1>

	<div id="editApp" v-cloak>
		<div v-if="problem">
			<div class="block my-2">
				<label>
					<span class="form-label">Titlu:</span>
					<input class="form-input" type="text" v-model="problem.name" />
				</label>
				<button class="btn btn-blue ml-2" @click="changeTitle">Editare</button>
			</div>
			<div class="block my-2">
				<label>
					<span class="form-label">Credite:</span>
					<input class="form-input" type="text" size="50" v-model="problem.credits" />
				</label>
				<button class="btn btn-blue ml-2" @click="changeCredits">Editare</button>
			</div>
			<div class="block my-2">
				<button class="btn btn-blue mr-2" @click="toggleVisibility" v-if="admin">Fă ${problem.visible ? "invizibilă" : "vizibilă"}</button>
				<button class="btn btn-blue" @click="toggleConsoleInput">Fă intrarea prin ${problem.console_input ? "fișiere" : "consolă"}</button>
			</div>
			<div class="block my-2" v-if="!problem.console_input">
				<label>
					<span class="mr-2 text-xl">Nume test:</span>
					<input class="form-input" type="text" v-model="problem.test_name" />
				</label>
				<button class="btn btn-blue ml-2" @click="changeTestName">Editare</button>
			</div>
			<div class="list-group my-2">
				<a class="block list-group-item" :href="`/probleme/${problem.id}/edit/enunt`">Editare enunț</a>
				<a class="block list-group-item" :href="`/probleme/${problem.id}/edit/limite`">Editare limite</a>
				<a class="block list-group-item" :href="`/probleme/${problem.id}/edit/teste`">Editare teste</a>
			</div>
		</div>
		<div class="text-4xl mx-auto w-full text-center" v-else>
			<i class="fas fa-spinner animate-spin"></i> Se încarcă...
		</div>
	</div>

	<script>
Vue.createApp({
	el: "",
	delimiters: ['${', '}'],
	data: () => {
		return {
			problem: null,
			admin: {{.User.Admin}}
		}
	},
	methods: {
		changeTitle: async function() {
			if(this.problem == null || this.problem.name === "") {
				createToast({status: "error", description: "Titlu gol"});
				return
			}
			let res = await postCall(`/problem/${this.problem.id}/update/title`, {title: this.problem.name})
			apiToast(res);
		},
		changeCredits: async function() {
			let res = await postCall(`/problem/${this.problem.id}/update/credits`, {credits: this.problem.credits})
			apiToast(res);
		},
		changeTestName: async function() {
			let res = await postCall(`/problem/${this.problem.id}/update/setTestName`, {testName: this.problem.test_name})
			apiToast(res);
		},
		toggleVisibility: async function() {
			let res = await postCall(`/problem/${this.problem.id}/update/setVisible`, {visible: !this.problem.visible})
			if(res.status === "success") {
				this.problem.visible = !this.problem.visible;
			}
			apiToast(res);
		},
		toggleConsoleInput: async function() {
			let res = await postCall(`/problem/${this.problem.id}/update/consoleInput`, {isset: !this.problem.console_input})
			if(res.status === "success") {
				this.problem.console_input = !this.problem.console_input;
			}
			apiToast(res);
		}
	},
	created: async function() {
		let res = await getCall("/problem/getByID", {id: {{.Problem.ID}} })
		if(res.status == "error") {
			apiToast(res);
			return;
		}
		this.problem = res.data;
	}
}).mount("#editApp");
	</script>
</div>
{{template "util/footer" . }}
